"""
Fraud Alert System for MyBank

Customer notification and alert management system.
Generated by Code Agent
"""
import smtplib
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

try:
    from .transaction_monitor import MonitoringAlert
except ImportError:
    MonitoringAlert = None


@dataclass
class Customer:
    """Customer information for alerts."""
    customer_id: str
    email: str
    phone: str
    name: str
    alert_preferences: Dict[str, bool]


@dataclass
class AlertDelivery:
    """Alert delivery tracking."""
    delivery_id: str
    alert_id: str
    customer_id: str
    channel: str  # EMAIL, SMS, PUSH, PHONE
    status: str  # PENDING, SENT, DELIVERED, FAILED
    timestamp: datetime
    retry_count: int = 0


class FraudAlertSystem:
    """
    Customer fraud alert and notification system.
    """
    
    def __init__(self, config: Dict[str, Any] = None):
        """Initialize alert system."""
        self.config = config or self._default_config()
        self.delivery_log: List[AlertDelivery] = []
        self.customer_cache: Dict[str, Customer] = {}
    
    def _default_config(self) -> Dict[str, Any]:
        """Get default alert system configuration."""
        return {
            "smtp_server": "localhost",
            "smtp_port": 587,
            "email_from": "fraud-alerts@mybank.com",
            "sms_provider": "twilio",
            "max_retries": 3,
            "retry_delay_minutes": 5,
            "alert_timeout_hours": 24
        }
    
    async def send_fraud_alert(self, alert: MonitoringAlert, 
                             customer: Customer) -> List[AlertDelivery]:
        """
        Send fraud alert to customer via preferred channels.
        
        Args:
            alert: Fraud monitoring alert
            customer: Customer information
            
        Returns:
            List of delivery attempts
        """
        deliveries = []
        
        # Determine alert urgency and channels
        channels = self._get_alert_channels(alert.severity, customer.alert_preferences)
        
        # Send via each channel
        for channel in channels:
            delivery = await self._send_via_channel(alert, customer, channel)
            deliveries.append(delivery)
            self.delivery_log.append(delivery)
        
        return deliveries
    
    def _get_alert_channels(self, severity: str, preferences: Dict[str, bool]) -> List[str]:
        """Determine which channels to use based on severity and preferences."""
        channels = []
        
        # Always use email for any fraud alert
        if preferences.get("email", True):
            channels.append("EMAIL")
        
        # SMS for high severity
        if severity in ["HIGH", "CRITICAL"] and preferences.get("sms", True):
            channels.append("SMS")
        
        # Push notifications if available
        if preferences.get("push", True):
            channels.append("PUSH")
        
        # Phone call for critical alerts
        if severity == "CRITICAL" and preferences.get("phone", False):
            channels.append("PHONE")
        
        return channels
    
    async def _send_via_channel(self, alert: MonitoringAlert, 
                              customer: Customer, channel: str) -> AlertDelivery:
        """Send alert via specific channel."""
        delivery = AlertDelivery(
            delivery_id=f"{channel}_{alert.alert_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            alert_id=alert.alert_id,
            customer_id=customer.customer_id,
            channel=channel,
            status="PENDING",
            timestamp=datetime.now()
        )
        
        try:
            if channel == "EMAIL":
                success = await self._send_email_alert(alert, customer)
            elif channel == "SMS":
                success = await self._send_sms_alert(alert, customer)
            elif channel == "PUSH":
                success = await self._send_push_alert(alert, customer)
            elif channel == "PHONE":
                success = await self._send_phone_alert(alert, customer)
            else:
                success = False
            
            delivery.status = "SENT" if success else "FAILED"
            
        except Exception as e:
            delivery.status = "FAILED"
            print(f"Error sending {channel} alert: {e}")
        
        return delivery
    
    async def _send_email_alert(self, alert: MonitoringAlert, customer: Customer) -> bool:
        """Send fraud alert via email."""
        try:
            # Create email content
            subject = f"ðŸš¨ MyBank Fraud Alert - {alert.severity} Risk Detected"
            
            html_body = f"""
            <html>
            <body>
                <h2 style="color: #d32f2f;">MyBank Security Alert</h2>
                <p>Dear {customer.name},</p>
                
                <p>We've detected suspicious activity on your account and have taken protective measures.</p>
                
                <div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;">
                    <h3>Alert Details:</h3>
                    <p><strong>Severity:</strong> {alert.severity}</p>
                    <p><strong>Alert ID:</strong> {alert.alert_id}</p>
                    <p><strong>Time:</strong> {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}</p>
                    <p><strong>Recommended Action:</strong> {alert.recommended_action}</p>
                </div>
                
                <p><strong>What you should do:</strong></p>
                <ul>
                    <li>Review your recent transactions</li>
                    <li>Contact us immediately if you don't recognize this activity</li>
                    <li>Do not ignore this alert</li>
                </ul>
                
                <p>If this was you, no action is needed. If not, please contact our fraud department immediately at 1-800-MYBANK-FRAUD.</p>
                
                <p>Best regards,<br>MyBank Security Team</p>
                
                <p style="font-size: 12px; color: #666;">
                    This is an automated security alert. Please do not reply to this email.
                </p>
            </body>
            </html>
            """
            
            # Create message
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = self.config['email_from']
            msg['To'] = customer.email
            
            html_part = MIMEText(html_body, 'html')
            msg.attach(html_part)
            
            # Send email (simplified - would use actual SMTP in production)
            print(f"ðŸ“§ EMAIL ALERT sent to {customer.email}: {subject}")
            return True
            
        except Exception as e:
            print(f"Failed to send email alert: {e}")
            return False
    
    async def _send_sms_alert(self, alert: MonitoringAlert, customer: Customer) -> bool:
        """Send fraud alert via SMS."""
        try:
            message = (
                f"ðŸš¨ MyBank FRAUD ALERT: {alert.severity} risk detected on your account. "
                f"Action: {alert.recommended_action}. "
                f"If this wasn't you, call 1-800-MYBANK-FRAUD immediately. Alert ID: {alert.alert_id}"
            )
            
            # Send SMS (simplified - would use actual SMS service in production)
            print(f"ðŸ“± SMS ALERT sent to {customer.phone}: {message[:100]}...")
            return True
            
        except Exception as e:
            print(f"Failed to send SMS alert: {e}")
            return False
    
    async def _send_push_alert(self, alert: MonitoringAlert, customer: Customer) -> bool:
        """Send fraud alert via push notification."""
        try:
            push_data = {
                "title": "ðŸš¨ MyBank Fraud Alert",
                "body": f"{alert.severity} risk detected. Tap for details.",
                "data": {
                    "alert_id": alert.alert_id,
                    "severity": alert.severity,
                    "action": alert.recommended_action
                }
            }
            
            # Send push notification (simplified - would use actual push service)
            print(f"ðŸ”” PUSH ALERT sent to customer {customer.customer_id}: {push_data['title']}")
            return True
            
        except Exception as e:
            print(f"Failed to send push alert: {e}")
            return False
    
    async def _send_phone_alert(self, alert: MonitoringAlert, customer: Customer) -> bool:
        """Send fraud alert via automated phone call."""
        try:
            call_script = (
                f"Hello, this is MyBank security. We've detected {alert.severity.lower()} risk "
                f"activity on your account. Please call us immediately at 1-800-MYBANK-FRAUD "
                f"to verify your recent transactions. Alert reference: {alert.alert_id}."
            )
            
            # Make automated call (simplified - would use actual phone service)
            print(f"ðŸ“ž PHONE ALERT initiated to {customer.phone}: {call_script[:50]}...")
            return True
            
        except Exception as e:
            print(f"Failed to send phone alert: {e}")
            return False
    
    def get_delivery_status(self, alert_id: str) -> List[AlertDelivery]:
        """Get delivery status for an alert."""
        return [d for d in self.delivery_log if d.alert_id == alert_id]
    
    def get_customer_alert_history(self, customer_id: str) -> List[AlertDelivery]:
        """Get alert history for a customer."""
        return [d for d in self.delivery_log if d.customer_id == customer_id]
