"""
Fraud Detection Model for MyBank

Real-time fraud detection with machine learning capabilities.
Generated by Code Agent
"""
from dataclasses import dataclass
from typing import Dict, List, Any, Optional
from datetime import datetime
from decimal import Decimal
import json


@dataclass
class Transaction:
    """Transaction data model for fraud detection."""
    id: str
    customer_id: str
    amount: Decimal
    merchant: str
    location: str
    timestamp: datetime
    card_number_hash: str
    transaction_type: str
    metadata: Dict[str, Any] = None


@dataclass
class FraudScore:
    """Fraud risk score result."""
    transaction_id: str
    score: float  # 0.0 to 1.0 (higher = more suspicious)
    risk_level: str  # LOW, MEDIUM, HIGH, CRITICAL
    factors: List[str]
    recommendation: str  # APPROVE, REVIEW, DECLINE, BLOCK_CARD


class FraudDetector:
    """
    Real-time fraud detection engine with ML capabilities.
    """
    
    def __init__(self, config: Dict[str, Any] = None):
        """Initialize fraud detector with configuration."""
        self.config = config or self._default_config()
        self.model_version = "1.0"
        self.risk_thresholds = {
            "low": 0.3,
            "medium": 0.6,
            "high": 0.8,
            "critical": 0.95
        }
    
    def _default_config(self) -> Dict[str, Any]:
        """Get default fraud detection configuration."""
        return {
            "max_daily_amount": 10000.00,
            "max_transaction_amount": 5000.00,
            "suspicious_locations": ["high_risk_country_codes"],
            "velocity_check_window_minutes": 30,
            "max_transactions_per_window": 5
        }
    
    def analyze_transaction(self, transaction: Transaction, 
                          customer_history: List[Transaction] = None) -> FraudScore:
        """
        Analyze transaction for fraud indicators.
        
        Args:
            transaction: Transaction to analyze
            customer_history: Recent customer transaction history
            
        Returns:
            Fraud score and recommendation
        """
        customer_history = customer_history or []
        
        # Calculate individual risk factors
        amount_score = self._analyze_amount_risk(transaction, customer_history)
        location_score = self._analyze_location_risk(transaction, customer_history)
        velocity_score = self._analyze_velocity_risk(transaction, customer_history)
        pattern_score = self._analyze_pattern_risk(transaction, customer_history)
        
        # Weighted composite score
        composite_score = (
            amount_score * 0.3 +
            location_score * 0.2 +
            velocity_score * 0.3 +
            pattern_score * 0.2
        )
        
        # Determine risk level and recommendation
        risk_level = self._determine_risk_level(composite_score)
        recommendation = self._get_recommendation(risk_level, composite_score)
        
        # Collect contributing factors
        factors = self._identify_risk_factors(
            amount_score, location_score, velocity_score, pattern_score
        )
        
        return FraudScore(
            transaction_id=transaction.id,
            score=composite_score,
            risk_level=risk_level,
            factors=factors,
            recommendation=recommendation
        )
    
    def _analyze_amount_risk(self, transaction: Transaction, 
                           history: List[Transaction]) -> float:
        """Analyze transaction amount risk."""
        amount = float(transaction.amount)
        
        # Check against absolute limits
        if amount > self.config["max_transaction_amount"]:
            return 0.9
        
        # Check against customer's historical patterns
        if history:
            historical_amounts = [float(t.amount) for t in history[-10:]]
            avg_amount = sum(historical_amounts) / len(historical_amounts)
            
            # Unusual amount deviation
            if amount > avg_amount * 3:
                return 0.7
            elif amount > avg_amount * 2:
                return 0.4
        
        # Check daily spending
        today_total = sum(
            float(t.amount) for t in history
            if t.timestamp.date() == transaction.timestamp.date()
        )
        
        if today_total + amount > self.config["max_daily_amount"]:
            return 0.8
        
        return 0.1
    
    def _analyze_location_risk(self, transaction: Transaction, 
                             history: List[Transaction]) -> float:
        """Analyze transaction location risk."""
        location = transaction.location.lower()
        
        # Check suspicious locations
        for suspicious in self.config["suspicious_locations"]:
            if suspicious.lower() in location:
                return 0.9
        
        # Check against customer's usual locations
        if history:
            usual_locations = set(t.location.lower() for t in history[-20:])
            if location not in usual_locations:
                return 0.6
        
        return 0.1
    
    def _analyze_velocity_risk(self, transaction: Transaction, 
                             history: List[Transaction]) -> float:
        """Analyze transaction velocity risk."""
        # Count recent transactions in time window
        window_start = transaction.timestamp.replace(
            minute=transaction.timestamp.minute - self.config["velocity_check_window_minutes"]
        )
        
        recent_transactions = [
            t for t in history
            if t.timestamp >= window_start and t.timestamp <= transaction.timestamp
        ]
        
        if len(recent_transactions) >= self.config["max_transactions_per_window"]:
            return 0.8
        elif len(recent_transactions) >= self.config["max_transactions_per_window"] * 0.7:
            return 0.5
        
        return 0.1
    
    def _analyze_pattern_risk(self, transaction: Transaction, 
                            history: List[Transaction]) -> float:
        """Analyze transaction pattern anomalies."""
        # Check for unusual merchant categories
        if history:
            historical_merchants = set(t.merchant.lower() for t in history[-15:])
            if transaction.merchant.lower() not in historical_merchants:
                return 0.4
        
        # Check for unusual transaction times
        hour = transaction.timestamp.hour
        if hour < 6 or hour > 22:  # Late night/early morning
            return 0.3
        
        return 0.1
    
    def _determine_risk_level(self, score: float) -> str:
        """Determine risk level from composite score."""
        if score >= self.risk_thresholds["critical"]:
            return "CRITICAL"
        elif score >= self.risk_thresholds["high"]:
            return "HIGH"
        elif score >= self.risk_thresholds["medium"]:
            return "MEDIUM"
        else:
            return "LOW"
    
    def _get_recommendation(self, risk_level: str, score: float) -> str:
        """Get action recommendation based on risk level."""
        recommendations = {
            "LOW": "APPROVE",
            "MEDIUM": "REVIEW",
            "HIGH": "DECLINE",
            "CRITICAL": "BLOCK_CARD"
        }
        return recommendations.get(risk_level, "REVIEW")
    
    def _identify_risk_factors(self, amount_score: float, location_score: float,
                             velocity_score: float, pattern_score: float) -> List[str]:
        """Identify contributing risk factors."""
        factors = []
        
        if amount_score > 0.5:
            factors.append("Unusual transaction amount")
        if location_score > 0.5:
            factors.append("Suspicious or unusual location")
        if velocity_score > 0.5:
            factors.append("High transaction velocity")
        if pattern_score > 0.5:
            factors.append("Unusual transaction pattern")
        
        return factors
